<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
    "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <title>SWIG implementation experience in Euler</title>
  <link href="../Tools/w3ctalk-summary.css" rel=stylesheet type="text/css" title="Agfa Talk">
</head>

<!-- PxButton | copy  | pxcopy -v /www.agfa.com/w3c/Talks/2004/03swig/** ftp://www01.net.agfa.com/Talks/2004/03swig | -->

<body>

<h1>SWIG implementation experience in Euler</h1>
<p>2004-03-02</p>
<p><a href="http://www.agfa.com/w3c/Talks/2004/03swig/Overview.html">http://www.agfa.com/w3c/Talks/2004/03swig/Overview.html</a>
<p>by <a href="http://www.agfa.com/w3c/jdroo/">Jos De Roo</a> of <a href="http://www.agfa.com/">AGFA</a><br>

<h1>Running Code</h1>
<ul>
  <li><a href="http://sourceforge.net/projects/eulersharp">EulerSharp</a> is an inference
      engine supporting logic based proofs of test cases (*).</li>
  <li>It is a backward-chaining reasoner enhanced with Euler path detection and will tell
      you whether a given set of facts and rules supports a given conclusion.</li>
  <li>using as much as possible from DanC's and TimBL's SWAP</li>
  <li>implemented in Java, C# and Python</li>
  <li>making use of Jena-2.1 in RDF/XML to N3 triples generation (but have to dig into DIG)</li>
  <li>small footprint (engine is 30 Kbyte jar file) and have achieved > .5 Msteps/sec</li>
</ul>
<table cellspacing="0" cellpadding="8" border="1"><tbody><tr><td>
(*) Test cases have a THIS part and a THAT part such that assuming the THIS part implies the THAT part.<br/>
    Test cases have explicit assumptions because assumptions should be checked.<br/>
    Test cases make issues observable (both issues w.r.t. requirements and designissues).<br/>
    Test cases lead to test results which are one of passing, failing, undecided or no-data.<br/>
    Test cases can be in the following state: proposed, approved, extra-credit or obsoleted.
</td></tr></tbody></table>

<h1>Theories</h1>
<ul>
  <li><a href="http://eulersharp.sourceforge.net/2003/03swap/rdfs-rules.n3">rdfs-rules</a></li>
  <li><a href="http://eulersharp.sourceforge.net/2003/03swap/xsd-rules.n3">xsd-rules</a></li>
  <li><a href="http://eulersharp.sourceforge.net/2003/03swap/owl-rules.n3">owl-rules</a></li>
  <li><a href="http://eulersharp.sourceforge.net/2003/03swap/log-rules.n3">log-rules</a></li>
</ul>

<h1>Testcases</h1>
<ul>
  <li><a href="http://eulersharp.sourceforge.net/2003/03swap/etc1.n3">RDFCore test cases</a> and
      <a href="http://eulersharp.sourceforge.net/2004/01swap/docs/java/testResults/etc1-results-java.n3">results</a></li>
  <li><a href="http://eulersharp.sourceforge.net/2003/03swap/etc2.n3">OWL test cases</a> and
      <a href="http://eulersharp.sourceforge.net/2004/01swap/docs/java/testResults/etc2-results-java.n3">results</a></li>
  <li><a href="http://eulersharp.sourceforge.net/2003/03swap/etc3.n3">etc3 test cases</a> and
      <a href="http://eulersharp.sourceforge.net/2004/01swap/docs/java/testResults/etc3-results-java.n3">results</a></li>
</ul>

<h1>Conclusions</h1>
<ul>
  <li>first support simple and then more complex systems</li> 
  <li>RDF and OWL enable optimal reuse of data in networked environment</li>
  <li>a bit like going from cpu/memory/network/IOhardware to engines/triples/webservices/IOsoftware</li>
  <li>or from avoid-hardware-wiring to avoid-software-wiring...</li>
  <li>and promising for automatic software component generation</li>
</ul>
<center><font size="+3"><big>Thanks!</font></center>

</body>
</html>
